// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REQUEST_CLIENT_H_
#define FLATBUFFERS_GENERATED_REQUEST_CLIENT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct RequestHeader;
struct RequestHeaderBuilder;

namespace Client {

struct TestRequest;
struct TestRequestBuilder;

enum RequestId : uint8_t {
  RequestId_Test = 0,
  RequestId_MIN = RequestId_Test,
  RequestId_MAX = RequestId_Test
};

inline const RequestId (&EnumValuesRequestId())[1] {
  static const RequestId values[] = {
    RequestId_Test
  };
  return values;
}

inline const char * const *EnumNamesRequestId() {
  static const char * const names[2] = {
    "Test",
    nullptr
  };
  return names;
}

inline const char *EnumNameRequestId(RequestId e) {
  if (::flatbuffers::IsOutRange(e, RequestId_Test, RequestId_Test)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesRequestId()[index];
}

}  // namespace Client

struct RequestHeader FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RequestHeaderBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_BODY_SIZE = 6
  };
  uint8_t type() const {
    return GetField<uint8_t>(VT_TYPE, 0);
  }
  uint64_t body_size() const {
    return GetField<uint64_t>(VT_BODY_SIZE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_TYPE, 1) &&
           VerifyField<uint64_t>(verifier, VT_BODY_SIZE, 8) &&
           verifier.EndTable();
  }
};

struct RequestHeaderBuilder {
  typedef RequestHeader Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(uint8_t type) {
    fbb_.AddElement<uint8_t>(RequestHeader::VT_TYPE, type, 0);
  }
  void add_body_size(uint64_t body_size) {
    fbb_.AddElement<uint64_t>(RequestHeader::VT_BODY_SIZE, body_size, 0);
  }
  explicit RequestHeaderBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RequestHeader> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RequestHeader>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RequestHeader> CreateRequestHeader(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t type = 0,
    uint64_t body_size = 0) {
  RequestHeaderBuilder builder_(_fbb);
  builder_.add_body_size(body_size);
  builder_.add_type(type);
  return builder_.Finish();
}

namespace Client {

struct TestRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TestRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY = 4
  };
  uint64_t key() const {
    return GetField<uint64_t>(VT_KEY, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_KEY, 8) &&
           verifier.EndTable();
  }
};

struct TestRequestBuilder {
  typedef TestRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_key(uint64_t key) {
    fbb_.AddElement<uint64_t>(TestRequest::VT_KEY, key, 0);
  }
  explicit TestRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TestRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TestRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TestRequest> CreateTestRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t key = 0) {
  TestRequestBuilder builder_(_fbb);
  builder_.add_key(key);
  return builder_.Finish();
}

}  // namespace Client

namespace Client {

}  // namespace Client

inline const RequestHeader *GetRequestHeader(const void *buf) {
  return ::flatbuffers::GetRoot<RequestHeader>(buf);
}

inline const RequestHeader *GetSizePrefixedRequestHeader(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<RequestHeader>(buf);
}

inline bool VerifyRequestHeaderBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<RequestHeader>(nullptr);
}

inline bool VerifySizePrefixedRequestHeaderBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<RequestHeader>(nullptr);
}

inline void FinishRequestHeaderBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<RequestHeader> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRequestHeaderBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<RequestHeader> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_REQUEST_CLIENT_H_
